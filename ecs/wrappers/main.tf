module "wrapper" {
  source = "../"

  for_each = var.items

  tags                                  = try(each.value.tags, var.defaults.tags, {})
  cluster_name                          = try(each.value.cluster_name, var.defaults.cluster_name, "")
  cluster_configuration                 = try(each.value.cluster_configuration, var.defaults.cluster_configuration, {})
  cluster_settings                      = try(each.value.cluster_settings, var.defaults.cluster_settings, [])
  create_task_definition                = try(each.value.create_task_definition, var.defaults.create_task_definition, true)
  family                                = try(each.value.family, var.defaults.family, null)
  container_definitions                 = try(each.value.container_definitions, var.defaults.container_definitions, {})
  cpu                                   = try(each.value.cpu, var.defaults.cpu, 1024)
  memory                                = try(each.value.memory, var.defaults.memory, 2048)
  network_mode                          = try(each.value.network_mode, var.defaults.network_mode, "awsvpc")
  pid_mode                              = try(each.value.pid_mode, var.defaults.pid_mode, null)
  task_definition_placement_constraints = try(each.value.task_definition_placement_constraints, var.defaults.task_definition_placement_constraints, {})
  requires_compatibilities              = try(each.value.requires_compatibilities, var.defaults.requires_compatibilities, ["EC2"])
  runtime_platform = try(each.value.runtime_platform, var.defaults.runtime_platform, {
    operating_system_family = "LINUX"
    cpu_architecture        = "X86_64"
  })
  volume                                 = try(each.value.volume, var.defaults.volume, {})
  task_tags                              = try(each.value.task_tags, var.defaults.task_tags, {})
  service_name                           = try(each.value.service_name, var.defaults.service_name, null)
  alarms                                 = try(each.value.alarms, var.defaults.alarms, {})
  capacity_provider_strategy             = try(each.value.capacity_provider_strategy, var.defaults.capacity_provider_strategy, {})
  launch_type                            = try(each.value.launch_type, var.defaults.launch_type, "EC2")
  deployment_circuit_breaker             = try(each.value.deployment_circuit_breaker, var.defaults.deployment_circuit_breaker, {})
  desired_count                          = try(each.value.desired_count, var.defaults.desired_count, 1)
  scheduling_strategy                    = try(each.value.scheduling_strategy, var.defaults.scheduling_strategy, null)
  propagate_tags                         = try(each.value.propagate_tags, var.defaults.propagate_tags, "SERVICE")
  deployment_controller                  = try(each.value.deployment_controller, var.defaults.deployment_controller, {})
  load_balancer                          = try(each.value.load_balancer, var.defaults.load_balancer, {})
  deployment_maximum_percent             = try(each.value.deployment_maximum_percent, var.defaults.deployment_maximum_percent, 200)
  deployment_minimum_healthy_percent     = try(each.value.deployment_minimum_healthy_percent, var.defaults.deployment_minimum_healthy_percent, 66)
  create_iam_role                        = try(each.value.create_iam_role, var.defaults.create_iam_role, true)
  iam_role_name                          = try(each.value.iam_role_name, var.defaults.iam_role_name, null)
  iam_role_path                          = try(each.value.iam_role_path, var.defaults.iam_role_path, null)
  iam_role_tags                          = try(each.value.iam_role_tags, var.defaults.iam_role_tags, {})
  iam_role_statements                    = try(each.value.iam_role_statements, var.defaults.iam_role_statements, {})
  create_task_exec_iam_role              = try(each.value.create_task_exec_iam_role, var.defaults.create_task_exec_iam_role, true)
  task_exec_iam_role_arn                 = try(each.value.task_exec_iam_role_arn, var.defaults.task_exec_iam_role_arn, null)
  task_exec_iam_role_name                = try(each.value.task_exec_iam_role_name, var.defaults.task_exec_iam_role_name, null)
  task_exec_iam_role_path                = try(each.value.task_exec_iam_role_path, var.defaults.task_exec_iam_role_path, null)
  task_exec_iam_role_tags                = try(each.value.task_exec_iam_role_tags, var.defaults.task_exec_iam_role_tags, {})
  create_task_exec_policy                = try(each.value.create_task_exec_policy, var.defaults.create_task_exec_policy, true)
  task_exec_ssm_param_arns               = try(each.value.task_exec_ssm_param_arns, var.defaults.task_exec_ssm_param_arns, ["arn:aws:ssm:*:*:parameter/*"])
  task_exec_secret_arns                  = try(each.value.task_exec_secret_arns, var.defaults.task_exec_secret_arns, ["arn:aws:secretsmanager:*:*:secret:*"])
  task_exec_iam_statements               = try(each.value.task_exec_iam_statements, var.defaults.task_exec_iam_statements, {})
  create_tasks_iam_role                  = try(each.value.create_tasks_iam_role, var.defaults.create_tasks_iam_role, true)
  tasks_iam_role_arn                     = try(each.value.tasks_iam_role_arn, var.defaults.tasks_iam_role_arn, null)
  tasks_iam_role_name                    = try(each.value.tasks_iam_role_name, var.defaults.tasks_iam_role_name, null)
  tasks_iam_role_path                    = try(each.value.tasks_iam_role_path, var.defaults.tasks_iam_role_path, null)
  tasks_iam_role_tags                    = try(each.value.tasks_iam_role_tags, var.defaults.tasks_iam_role_tags, {})
  create_cloudwatch_log_group            = try(each.value.create_cloudwatch_log_group, var.defaults.create_cloudwatch_log_group, true)
  cloudwatch_log_group_retention_in_days = try(each.value.cloudwatch_log_group_retention_in_days, var.defaults.cloudwatch_log_group_retention_in_days, 90)
  cloudwatch_log_group_kms_key_id        = try(each.value.cloudwatch_log_group_kms_key_id, var.defaults.cloudwatch_log_group_kms_key_id, null)
  cloudwatch_log_group_tags              = try(each.value.cloudwatch_log_group_tags, var.defaults.cloudwatch_log_group_tags, {})
  autoscaling_capacity_providers         = try(each.value.autoscaling_capacity_providers, var.defaults.autoscaling_capacity_providers, {})
  create_security_group                  = try(each.value.create_security_group, var.defaults.create_security_group, true)
  security_group_name                    = try(each.value.security_group_name, var.defaults.security_group_name, null)
  security_group_description             = try(each.value.security_group_description, var.defaults.security_group_description, null)
  vpc_id                                 = try(each.value.vpc_id, var.defaults.vpc_id, null)
  security_group_rules                   = try(each.value.security_group_rules, var.defaults.security_group_rules, {})
  security_group_tags                    = try(each.value.security_group_tags, var.defaults.security_group_tags, {})
}
