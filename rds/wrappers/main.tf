module "wrapper" {
  source = "../"

  for_each = var.items

  identifier                            = try(each.value.identifier, var.defaults.identifier, null)
  custom_iam_instance_profile           = try(each.value.custom_iam_instance_profile, var.defaults.custom_iam_instance_profile, null)
  allocated_storage                     = try(each.value.allocated_storage, var.defaults.allocated_storage, null)
  storage_type                          = try(each.value.storage_type, var.defaults.storage_type, null)
  storage_throughput                    = try(each.value.storage_throughput, var.defaults.storage_throughput, null)
  storage_encrypted                     = try(each.value.storage_encrypted, var.defaults.storage_encrypted, true)
  kms_key_id                            = try(each.value.kms_key_id, var.defaults.kms_key_id, null)
  replicate_source_db                   = try(each.value.replicate_source_db, var.defaults.replicate_source_db, null)
  license_model                         = try(each.value.license_model, var.defaults.license_model, null)
  replica_mode                          = try(each.value.replica_mode, var.defaults.replica_mode, null)
  iam_database_authentication_enabled   = try(each.value.iam_database_authentication_enabled, var.defaults.iam_database_authentication_enabled, true)
  engine                                = try(each.value.engine, var.defaults.engine, null)
  engine_version                        = try(each.value.engine_version, var.defaults.engine_version, null)
  instance_class                        = try(each.value.instance_class, var.defaults.instance_class, null)
  db_name                               = try(each.value.db_name, var.defaults.db_name, null)
  username                              = try(each.value.username, var.defaults.username, null)
  password                              = try(each.value.password, var.defaults.password, null)
  manage_master_user_password           = try(each.value.manage_master_user_password, var.defaults.manage_master_user_password, true)
  master_user_secret_kms_key_id         = try(each.value.master_user_secret_kms_key_id, var.defaults.master_user_secret_kms_key_id, null)
  port                                  = try(each.value.port, var.defaults.port, null)
  skip_final_snapshot                   = try(each.value.skip_final_snapshot, var.defaults.skip_final_snapshot, true)
  snapshot_identifier                   = try(each.value.snapshot_identifier, var.defaults.snapshot_identifier, null)
  copy_tags_to_snapshot                 = try(each.value.copy_tags_to_snapshot, var.defaults.copy_tags_to_snapshot, false)
  vpc_security_group_ids                = try(each.value.vpc_security_group_ids, var.defaults.vpc_security_group_ids, [])
  db_subnet_group_name                  = try(each.value.db_subnet_group_name, var.defaults.db_subnet_group_name, null)
  parameter_group_name                  = try(each.value.parameter_group_name, var.defaults.parameter_group_name, null)
  availability_zone                     = try(each.value.availability_zone, var.defaults.availability_zone, null)
  multi_az                              = try(each.value.multi_az, var.defaults.multi_az, false)
  iops                                  = try(each.value.iops, var.defaults.iops, null)
  publicly_accessible                   = try(each.value.publicly_accessible, var.defaults.publicly_accessible, false)
  allow_major_version_upgrade           = try(each.value.allow_major_version_upgrade, var.defaults.allow_major_version_upgrade, false)
  auto_minor_version_upgrade            = try(each.value.auto_minor_version_upgrade, var.defaults.auto_minor_version_upgrade, true)
  apply_immediately                     = try(each.value.apply_immediately, var.defaults.apply_immediately, false)
  maintenance_window                    = try(each.value.maintenance_window, var.defaults.maintenance_window, null)
  blue_green_update                     = try(each.value.blue_green_update, var.defaults.blue_green_update, {})
  backup_retention_period               = try(each.value.backup_retention_period, var.defaults.backup_retention_period, null)
  backup_window                         = try(each.value.backup_window, var.defaults.backup_window, null)
  enabled_cloudwatch_logs_exports       = try(each.value.enabled_cloudwatch_logs_exports, var.defaults.enabled_cloudwatch_logs_exports, [])
  timeouts                              = try(each.value.timeouts, var.defaults.timeouts, {})
  deletion_protection                   = try(each.value.deletion_protection, var.defaults.deletion_protection, false)
  performance_insights_enabled          = try(each.value.performance_insights_enabled, var.defaults.performance_insights_enabled, false)
  performance_insights_retention_period = try(each.value.performance_insights_retention_period, var.defaults.performance_insights_retention_period, 7)
  performance_insights_kms_key_id       = try(each.value.performance_insights_kms_key_id, var.defaults.performance_insights_kms_key_id, null)
  max_allocated_storage                 = try(each.value.max_allocated_storage, var.defaults.max_allocated_storage, 0)
  ca_cert_identifier                    = try(each.value.ca_cert_identifier, var.defaults.ca_cert_identifier, null)
  delete_automated_backups              = try(each.value.delete_automated_backups, var.defaults.delete_automated_backups, true)
  restore_to_point_in_time              = try(each.value.restore_to_point_in_time, var.defaults.restore_to_point_in_time, null)
  create_subnet_group                   = try(each.value.create_subnet_group, var.defaults.create_subnet_group, true)
  subnet_group_name                     = try(each.value.subnet_group_name, var.defaults.subnet_group_name, "")
  subnet_group_description              = try(each.value.subnet_group_description, var.defaults.subnet_group_description, null)
  subnet_ids                            = try(each.value.subnet_ids, var.defaults.subnet_ids, [])
  create_db_parameter_group             = try(each.value.create_db_parameter_group, var.defaults.create_db_parameter_group, true)
  db_parameter_group_name               = try(each.value.db_parameter_group_name, var.defaults.db_parameter_group_name, "")
  db_parameter_group_description        = try(each.value.db_parameter_group_description, var.defaults.db_parameter_group_description, null)
  family                                = try(each.value.family, var.defaults.family, null)
  parameters                            = try(each.value.parameters, var.defaults.parameters, [])
  tags                                  = try(each.value.tags, var.defaults.tags, {})
}
