module "wrapper" {
  source = "../"

  for_each = var.items

  create_function              = try(each.value.create_function, var.defaults.create_function, true)
  function_name                = try(each.value.function_name, var.defaults.function_name, "")
  description                  = try(each.value.description, var.defaults.description, "")
  lambda_role                  = try(each.value.lambda_role, var.defaults.lambda_role, "")
  memory_size                  = try(each.value.memory_size, var.defaults.memory_size, 128)
  local_existing_package       = try(each.value.local_existing_package, var.defaults.local_existing_package, null)
  layers                       = try(each.value.layers, var.defaults.layers, null)
  package_type                 = try(each.value.package_type, var.defaults.package_type, null)
  handler                      = try(each.value.handler, var.defaults.handler, "")
  runtime                      = try(each.value.runtime, var.defaults.runtime, "")
  environment_variables        = try(each.value.environment_variables, var.defaults.environment_variables, {})
  vpc_security_group_ids       = try(each.value.vpc_security_group_ids, var.defaults.vpc_security_group_ids, null)
  vpc_subnet_ids               = try(each.value.vpc_subnet_ids, var.defaults.vpc_subnet_ids, null)
  create_layer                 = try(each.value.create_layer, var.defaults.create_layer, false)
  layer_name                   = try(each.value.layer_name, var.defaults.layer_name, "")
  skip_destroy                 = try(each.value.skip_destroy, var.defaults.skip_destroy, false)
  architectures                = try(each.value.architectures, var.defaults.architectures, null)
  compatible_runtimes          = try(each.value.compatible_runtimes, var.defaults.compatible_runtimes, [])
  role_name                    = try(each.value.role_name, var.defaults.role_name, null)
  role_path                    = try(each.value.role_path, var.defaults.role_path, null)
  allowed_triggers             = try(each.value.allowed_triggers, var.defaults.allowed_triggers, {})
  policy_name                  = try(each.value.policy_name, var.defaults.policy_name, null)
  policy_path                  = try(each.value.policy_path, var.defaults.policy_path, null)
  policy_statements            = try(each.value.policy_statements, var.defaults.policy_statements, {})
  s3_bucket                    = try(each.value.s3_bucket, var.defaults.s3_bucket, null)
  s3_key                       = try(each.value.s3_key, var.defaults.s3_key, null)
  event_source_mapping         = try(each.value.event_source_mapping, var.defaults.event_source_mapping, {})
  ephemeral_storage_size       = try(each.value.ephemeral_storage_size, var.defaults.ephemeral_storage_size, 512)
  image_uri                    = try(each.value.image_uri, var.defaults.image_uri, null)
  dead_letter_target_arn       = try(each.value.dead_letter_target_arn, var.defaults.dead_letter_target_arn, null)
  timeout                      = try(each.value.timeout, var.defaults.timeout, 3)
  default_repo                 = try(each.value.default_repo, var.defaults.default_repo, null)
  function_event_invoke_config = try(each.value.function_event_invoke_config, var.defaults.function_event_invoke_config, {})
  tags                         = try(each.value.tags, var.defaults.tags, {})
}
